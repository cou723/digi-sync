diff --git a/.vscode/settings.json b/.vscode/settings.json
index 591cb0ec..9af55e4d 100644
--- a/.vscode/settings.json
+++ b/.vscode/settings.json
@@ -5,6 +5,7 @@
 		"freebusy",
 		"Ical",
 		"javax",
+		"jugyo",
 		"Krotoff"
 	],
 	"[typescript]": {
diff --git a/src/components/importForm/ImportForm.tsx b/src/components/importForm/ImportForm.tsx
index e7db4f2b..fdb834ff 100644
--- a/src/components/importForm/ImportForm.tsx
+++ b/src/components/importForm/ImportForm.tsx
@@ -9,7 +9,7 @@ import ImportOptions from "@/components/importFormCommon/importOptions";
 import ImportRangeSelect from "@/components/importFormCommon/importRangeSelect";
 import ImportYearSelect from "@/components/importFormCommon/importYearSelect";
 import RhfTextField from "@/components/utils/rhfTextField";
-import useBeforeUnload from "@/hooks/importHook";
+import useBeforeUnload from "@/hooks/useBeforeUnload";
 import { useCustomSession } from "@/hooks/useCustomSession";
 import { Digican } from "@/libs/digican";
 import { GoogleCalendar } from "@/libs/googleCalendar";
@@ -73,6 +73,7 @@ export default function ImportForm() {
 			setAppState("ready");
 			return;
 		}
+		console.log(classEventList);
 
 		setAppState("import");
 		let classEvents: RawClassEvent[] = classEventList;
diff --git a/src/components/importForm/index.tsx b/src/components/importForm/index.tsx
index 3d88106d..3c5c6d0c 100644
--- a/src/components/importForm/index.tsx
+++ b/src/components/importForm/index.tsx
@@ -13,7 +13,7 @@ import AllDeleteButton from "@/components/importFormCommon/allDeleteButton";
 import ImportOptions from "@/components/importFormCommon/importOptions";
 import ImportRangeSelect from "@/components/importFormCommon/importRangeSelect";
 import ImportYearSelect from "@/components/importFormCommon/importYearSelect";
-import useBeforeUnload from "@/hooks/importHook";
+import useBeforeUnload from "@/hooks/useBeforeUnload";
 import { useCustomSession } from "@/hooks/useCustomSession";
 import { Digican } from "@/libs/digican";
 import { GoogleCalendar } from "@/libs/googleCalendar";
@@ -86,7 +86,6 @@ export default function ImportForm() {
 			);
 		}
 
-		// class_events = excludeOutOfImportRange(inputs, class_events)
 		await GoogleCalendar.post(
 			session,
 			classEvents,
diff --git a/src/hooks/importHook.tsx b/src/hooks/useBeforeUnload.tsx
similarity index 100%
rename from src/hooks/importHook.tsx
rename to src/hooks/useBeforeUnload.tsx
diff --git a/src/hooks/icalHook.tsx b/src/hooks/useClassTableIcal.tsx
similarity index 100%
rename from src/hooks/icalHook.tsx
rename to src/hooks/useClassTableIcal.tsx
diff --git a/src/libs/fetchClassEvent/generateParam.ts b/src/libs/fetchClassEvent/generateParam.ts
index 3cd30d2f..99498b3e 100644
--- a/src/libs/fetchClassEvent/generateParam.ts
+++ b/src/libs/fetchClassEvent/generateParam.ts
@@ -18,9 +18,7 @@ export function generateHeaders(jSessionId: string): Record<string, string> {
 		"Accept-Encoding": "gzip, deflate, br",
 		"Accept-Language": "ja-JP,ja;q=0.9,en-US;q=0.8,en;q=0.7",
 		"Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
-		Cookie: generateCookie({
-			jSessionId: jSessionId,
-		}),
+		Cookie: generateCookie({ jSessionId }),
 		"Faces-Request": "partial/ajax",
 		Origin: "https://portal.dhw.ac.jp",
 		Referer: "https://portal.dhw.ac.jp/uprx/up/pk/pky001/Pky00101.xhtml",
diff --git a/src/libs/fetchClassEvent/index.ts b/src/libs/fetchClassEvent/index.ts
index 4f3f5b2a..289e8031 100644
--- a/src/libs/fetchClassEvent/index.ts
+++ b/src/libs/fetchClassEvent/index.ts
@@ -3,7 +3,6 @@ import { NextApiRequest } from "next";
 
 import { parseClassEvents } from "@/pages/api/classEvents";
 import ImportRange from "@/types/importRange";
-import { QueryParams } from "@/types/queryParams";
 import { SessionData } from "@/types/sessionData";
 import { ClassEvent } from "@/types/types";
 import { YearMonth } from "@/types/yearMonth";
@@ -17,7 +16,12 @@ const htmlParser = new jsdom.window.DOMParser();
 
 // api
 export async function fetchClassEvents(req: NextApiRequest) {
-	const { username, password, importYear, importRange } = parseBody(req.body);
+	const { username, password, importYear, importRange } = {
+		importRange: new ImportRange(req.body.importRange),
+		importYear: req.body.importYear,
+		password: req.body.password,
+		username: req.body.username,
+	};
 
 	const importYearMonthList = importRange.getYearMonthList(new Date().getFullYear());
 
@@ -26,7 +30,7 @@ export async function fetchClassEvents(req: NextApiRequest) {
 	console.log("year", importYear);
 	console.log("range", importRange);
 
-	const sessionData = await getSessionData(username, password);
+	const sessionData = await fetchSessionData(username, password);
 
 	const classEvents: ClassEvent[] = [];
 	console.log("yearMonthList :", importYearMonthList);
@@ -35,27 +39,20 @@ export async function fetchClassEvents(req: NextApiRequest) {
 	return classEvents;
 }
 
-export function parseBody(body: QueryParams) {
-	return {
-		importRange: new ImportRange(body.importRange),
-		importYear: body.importYear,
-		password: body.password,
-		username: body.username,
-	};
-}
-
 export async function fetchClassEventsPerOneMonth(
-	yearMonth: YearMonth,
+	targetMonth: YearMonth,
 	sessionData: SessionData,
 ): Promise<ClassEvent[]> {
-	console.log("get :", yearMonth);
+	console.log("get :", targetMonth);
+	console.log("body :", generateBody(targetMonth.year, targetMonth.month, sessionData));
 	const dhuPortalRes = await fetch(API_URL, {
-		body: generateBody(yearMonth.year, yearMonth.month, sessionData),
+		body: generateBody(targetMonth.year, targetMonth.month, sessionData),
 		headers: generateHeaders(sessionData.j_session_id),
 		method: "POST",
 	});
 
 	if (!dhuPortalRes.ok) throw Error("Failed to fetch class events from DHU Portal.");
+	console.log(dhuPortalRes);
 
 	let classEvents: ClassEvent[];
 	try {
@@ -64,30 +61,31 @@ export async function fetchClassEventsPerOneMonth(
 		console.log(e);
 		throw Error("Failed to parse class events from DHU Portal. Maybe your login is failing.");
 	}
-	console.log(yearMonth, classEvents.length);
+	console.log(targetMonth, classEvents.length);
 	return classEvents;
 }
-async function getSessionData(username: string, password: string): Promise<SessionData> {
-	const res = await getLoginResponse(username, password);
+async function fetchSessionData(username: string, password: string): Promise<SessionData> {
+	const res = await extractLoginResponse(username, password);
 	if (res.status != 200) throw new Error("Login failed");
+
 	const documentAfterLogin = htmlParser.parseFromString(await res.text(), "text/html");
+	const inputListInLoginForm = Array.from(documentAfterLogin.querySelectorAll("input"));
+	console.log(
+		"inputListInLoginForm :",
+		inputListInLoginForm.map((i) => i.name),
+	);
 
-	const sessionData: SessionData = {
+	return {
 		j_session_id: extractJSessionId(res.headers.get("set-cookie")),
-		javax_faces_view_state: "",
-		rx_login_key: "",
-		rx_token: "",
+		javax_faces_view_state: inputListInLoginForm.find((input) => input.name == "rx-token")!
+			.value,
+		rx_login_key: inputListInLoginForm.find((input) => input.name == "rx-loginKey")!.value,
+		rx_token: inputListInLoginForm.find((input) => input.name == "javax.faces.ViewState")!
+			.value,
 	};
-	for (const input of documentAfterLogin.querySelectorAll("input")) {
-		if (input.name == "rx-token") sessionData.rx_token = input.value;
-		if (input.name == "rx-loginKey") sessionData.rx_login_key = input.value;
-		if (input.name == "javax.faces.ViewState") sessionData.javax_faces_view_state = input.value;
-	}
-
-	return sessionData;
 }
 
-async function getLoginResponse(username: string, password: string): Promise<Response> {
+async function extractLoginResponse(username: string, password: string): Promise<Response> {
 	const res = await fetch(LOGIN_URL, {
 		body: generateLoginBody(username, password),
 		headers: {
@@ -100,11 +98,6 @@ async function getLoginResponse(username: string, password: string): Promise<Res
 
 function extractJSessionId(cookie: string | null): string {
 	if (cookie === null) return "";
-	const regex = /JSESSIONID=([^;]+)/;
-	const match = cookie.match(regex);
-	if (match) {
-		const jsessionid = match[1];
-		return jsessionid;
-	}
-	return "";
+	const match = cookie.match(/JSESSIONID=([^;]+)/);
+	return match ? match[1] : "";
 }
diff --git a/src/libs/table-to-ical/downloadBrowser.ts b/src/libs/table-to-ical/downloadBrowser.ts
index 89950dd1..d59e1e76 100644
--- a/src/libs/table-to-ical/downloadBrowser.ts
+++ b/src/libs/table-to-ical/downloadBrowser.ts
@@ -1,6 +1,6 @@
 import ical from "ical-generator";
 
-import { useClassTableIcalProps } from "../../hooks/icalHook";
+import { useClassTableIcalProps } from "../../hooks/useClassTableIcal";
 
 export const downloadBrowser = (event: useClassTableIcalProps["init"]): string => {
 	const calendar = ical({ name: "授業の時間" });
diff --git a/src/libs/table-to-ical/formDateToIcal.ts b/src/libs/table-to-ical/formDateToIcal.ts
index 70fd3144..47fee25d 100644
--- a/src/libs/table-to-ical/formDateToIcal.ts
+++ b/src/libs/table-to-ical/formDateToIcal.ts
@@ -1,5 +1,5 @@
 import { API_RETURN_EventList } from "../../components/importIcalForm";
-import { useClassTableIcalProps } from "../../hooks/icalHook";
+import { useClassTableIcalProps } from "../../hooks/useClassTableIcal";
 
 import { dayjsWrapper } from "./dayjs";
 
diff --git a/src/pages/index.tsx b/src/pages/index.tsx
index 34799212..d73d63b8 100644
--- a/src/pages/index.tsx
+++ b/src/pages/index.tsx
@@ -10,14 +10,14 @@ export default function Home() {
 		<>
 			<HEAD />
 			<Container maxWidth='sm' sx={{ pt: 2 }}>
-				{authStatus == "unauthenticated" && (
+				{authStatus == "unauthenticated" ? (
 					<Alert severity='error' sx={{ my: 2 }}>
 						GoogleアカウントでログインしないとGoogleカレンダーにインポートする機能は使えません。icalでダウンロードしたい方は
 						<Link href='/ical'>ここ</Link>
 					</Alert>
+				) : (
+					<ImportForm />
 				)}
-
-				<ImportForm />
 			</Container>
 		</>
 	);
